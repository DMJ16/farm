/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IVestedLPMiningInterface extends ethers.utils.Interface {
  functions: {
    "deposit(uint256,uint256)": FunctionFragment;
    "emergencyWithdraw(uint256)": FunctionFragment;
    "getCheckpoint(address,uint32)": FunctionFragment;
    "isLpTokenAdded(address)": FunctionFragment;
    "pendingCvp(uint256,address)": FunctionFragment;
    "poolLength()": FunctionFragment;
    "users(uint256,address)": FunctionFragment;
    "vestableCvp(uint256,address)": FunctionFragment;
    "withdraw(uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCheckpoint",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isLpTokenAdded",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingCvp",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "poolLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "users",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "vestableCvp",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCheckpoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isLpTokenAdded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pendingCvp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolLength", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "users", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "vestableCvp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "AddLpToken(address,uint256,uint256)": EventFragment;
    "CheckpointTotalLpVotes(uint256)": EventFragment;
    "CheckpointUserLpVotes(address,uint256,uint256)": EventFragment;
    "CheckpointUserVotes(address,uint256,uint256)": EventFragment;
    "Deposit(address,uint256,uint256)": EventFragment;
    "EmergencyWithdraw(address,uint256,uint256)": EventFragment;
    "MigrateLpToken(address,address,uint256)": EventFragment;
    "SetCvpPerBlock(uint256)": EventFragment;
    "SetCvpPoolByMetaPool(address,address)": EventFragment;
    "SetCvpVestingPeriodInBlocks(uint256)": EventFragment;
    "SetLpToken(address,uint256,uint256)": EventFragment;
    "SetMigrator(address)": EventFragment;
    "Withdraw(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddLpToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CheckpointTotalLpVotes"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CheckpointUserLpVotes"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CheckpointUserVotes"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MigrateLpToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetCvpPerBlock"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetCvpPoolByMetaPool"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SetCvpVestingPeriodInBlocks"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetLpToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMigrator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export class IVestedLPMining extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IVestedLPMiningInterface;

  functions: {
    deposit(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deposit(uint256,uint256)"(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    emergencyWithdraw(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "emergencyWithdraw(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getCheckpoint(
      account: string,
      checkpointId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      fromBlock: number;
      cvpAmount: BigNumber;
      pooledCvpShare: BigNumber;
      0: number;
      1: BigNumber;
      2: BigNumber;
    }>;

    "getCheckpoint(address,uint32)"(
      account: string,
      checkpointId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      fromBlock: number;
      cvpAmount: BigNumber;
      pooledCvpShare: BigNumber;
      0: number;
      1: BigNumber;
      2: BigNumber;
    }>;

    isLpTokenAdded(
      _lpToken: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isLpTokenAdded(address)"(
      _lpToken: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    pendingCvp(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "pendingCvp(uint256,address)"(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    poolLength(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "poolLength()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    users(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
      1: number;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
    }>;

    "users(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
      1: number;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
    }>;

    vestableCvp(
      _pid: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "vestableCvp(uint256,address)"(
      _pid: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    withdraw(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdraw(uint256,uint256)"(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  deposit(
    _pid: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deposit(uint256,uint256)"(
    _pid: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  emergencyWithdraw(
    _pid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "emergencyWithdraw(uint256)"(
    _pid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getCheckpoint(
    account: string,
    checkpointId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    fromBlock: number;
    cvpAmount: BigNumber;
    pooledCvpShare: BigNumber;
    0: number;
    1: BigNumber;
    2: BigNumber;
  }>;

  "getCheckpoint(address,uint32)"(
    account: string,
    checkpointId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    fromBlock: number;
    cvpAmount: BigNumber;
    pooledCvpShare: BigNumber;
    0: number;
    1: BigNumber;
    2: BigNumber;
  }>;

  isLpTokenAdded(_lpToken: string, overrides?: CallOverrides): Promise<boolean>;

  "isLpTokenAdded(address)"(
    _lpToken: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  pendingCvp(
    _pid: BigNumberish,
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "pendingCvp(uint256,address)"(
    _pid: BigNumberish,
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  poolLength(overrides?: CallOverrides): Promise<BigNumber>;

  "poolLength()"(overrides?: CallOverrides): Promise<BigNumber>;

  users(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<{
    0: number;
    1: number;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
  }>;

  "users(uint256,address)"(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<{
    0: number;
    1: number;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
  }>;

  vestableCvp(
    _pid: BigNumberish,
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "vestableCvp(uint256,address)"(
    _pid: BigNumberish,
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdraw(
    _pid: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdraw(uint256,uint256)"(
    _pid: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    deposit(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "deposit(uint256,uint256)"(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    emergencyWithdraw(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "emergencyWithdraw(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getCheckpoint(
      account: string,
      checkpointId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      fromBlock: number;
      cvpAmount: BigNumber;
      pooledCvpShare: BigNumber;
      0: number;
      1: BigNumber;
      2: BigNumber;
    }>;

    "getCheckpoint(address,uint32)"(
      account: string,
      checkpointId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      fromBlock: number;
      cvpAmount: BigNumber;
      pooledCvpShare: BigNumber;
      0: number;
      1: BigNumber;
      2: BigNumber;
    }>;

    isLpTokenAdded(
      _lpToken: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isLpTokenAdded(address)"(
      _lpToken: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    pendingCvp(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pendingCvp(uint256,address)"(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolLength(overrides?: CallOverrides): Promise<BigNumber>;

    "poolLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    users(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
      1: number;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
    }>;

    "users(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
      1: number;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
    }>;

    vestableCvp(
      _pid: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "vestableCvp(uint256,address)"(
      _pid: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdraw(uint256,uint256)"(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AddLpToken(
      lpToken: string | null,
      pid: BigNumberish | null,
      allocPoint: null
    ): EventFilter;

    CheckpointTotalLpVotes(lpVotes: null): EventFilter;

    CheckpointUserLpVotes(
      user: string | null,
      pid: BigNumberish | null,
      lpVotes: null
    ): EventFilter;

    CheckpointUserVotes(
      user: string | null,
      pendedVotes: null,
      lpVotesShare: null
    ): EventFilter;

    Deposit(
      user: string | null,
      pid: BigNumberish | null,
      amount: null
    ): EventFilter;

    EmergencyWithdraw(
      user: string | null,
      pid: BigNumberish | null,
      amount: null
    ): EventFilter;

    MigrateLpToken(
      oldLpToken: string | null,
      newLpToken: string | null,
      pid: BigNumberish | null
    ): EventFilter;

    SetCvpPerBlock(cvpPerBlock: null): EventFilter;

    SetCvpPoolByMetaPool(
      metaPool: string | null,
      cvpPool: string | null
    ): EventFilter;

    SetCvpVestingPeriodInBlocks(cvpVestingPeriodInBlocks: null): EventFilter;

    SetLpToken(
      lpToken: string | null,
      pid: BigNumberish | null,
      allocPoint: null
    ): EventFilter;

    SetMigrator(migrator: string | null): EventFilter;

    Withdraw(
      user: string | null,
      pid: BigNumberish | null,
      amount: null
    ): EventFilter;
  };

  estimateGas: {
    deposit(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "deposit(uint256,uint256)"(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    emergencyWithdraw(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "emergencyWithdraw(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getCheckpoint(
      account: string,
      checkpointId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCheckpoint(address,uint32)"(
      account: string,
      checkpointId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isLpTokenAdded(
      _lpToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isLpTokenAdded(address)"(
      _lpToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingCvp(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pendingCvp(uint256,address)"(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolLength(overrides?: CallOverrides): Promise<BigNumber>;

    "poolLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    users(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "users(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vestableCvp(
      _pid: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "vestableCvp(uint256,address)"(
      _pid: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdraw(uint256,uint256)"(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    deposit(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deposit(uint256,uint256)"(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "emergencyWithdraw(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getCheckpoint(
      account: string,
      checkpointId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCheckpoint(address,uint32)"(
      account: string,
      checkpointId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isLpTokenAdded(
      _lpToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isLpTokenAdded(address)"(
      _lpToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingCvp(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pendingCvp(uint256,address)"(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "poolLength()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    users(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "users(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vestableCvp(
      _pid: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "vestableCvp(uint256,address)"(
      _pid: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdraw(uint256,uint256)"(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
