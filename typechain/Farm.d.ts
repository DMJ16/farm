/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface FarmInterface extends ethers.utils.Interface {
  functions: {
    "ZAPIN()": FunctionFragment;
    "ZAPOUT()": FunctionFragment;
    "addFarm(address,address)": FunctionFragment;
    "enterFarm(uint256,address)": FunctionFragment;
    "exitFarm(uint256,address)": FunctionFragment;
    "farmDirectory(uint256,address)": FunctionFragment;
    "getStakedBalance(uint256,address,address)": FunctionFragment;
    "harvestPicklesConvertToEth()": FunctionFragment;
    "kill()": FunctionFragment;
    "owner()": FunctionFragment;
    "pickle()": FunctionFragment;
    "pickleSellQty()": FunctionFragment;
    "rebalance()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "tokenDirectory(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "uniAddress()": FunctionFragment;
    "updatePickleAddress(address)": FunctionFragment;
    "updatePickleSellQty(uint256)": FunctionFragment;
    "updateUSDCToken(address)": FunctionFragment;
    "updateUniswap(address)": FunctionFragment;
    "updatefarmContract(uint256,address,address)": FunctionFragment;
    "usdc()": FunctionFragment;
    "usdcAddress()": FunctionFragment;
    "weth()": FunctionFragment;
    "wethAddress()": FunctionFragment;
    "withdrawTokens(address,uint256,address)": FunctionFragment;
    "zapIn(address,address,address,address,uint256,uint256)": FunctionFragment;
    "zapOutEthPair(address,address,uint256,uint256)": FunctionFragment;
    "zapOutTokenPair(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "ZAPIN", values?: undefined): string;
  encodeFunctionData(functionFragment: "ZAPOUT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addFarm",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "enterFarm",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "exitFarm",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "farmDirectory",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakedBalance",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "harvestPicklesConvertToEth",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "kill", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pickle", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pickleSellQty",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "rebalance", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenDirectory",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "uniAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updatePickleAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePickleSellQty",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateUSDCToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateUniswap",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updatefarmContract",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(functionFragment: "usdc", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "usdcAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "wethAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTokens",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "zapIn",
    values: [string, string, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "zapOutEthPair",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "zapOutTokenPair",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "ZAPIN", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ZAPOUT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addFarm", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "enterFarm", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exitFarm", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "farmDirectory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakedBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "harvestPicklesConvertToEth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "kill", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pickle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pickleSellQty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rebalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenDirectory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uniAddress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updatePickleAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePickleSellQty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateUSDCToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateUniswap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatefarmContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdc", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "usdcAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "wethAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "zapIn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "zapOutEthPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "zapOutTokenPair",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class Farm extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: FarmInterface;

  functions: {
    ZAPIN(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "ZAPIN()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    ZAPOUT(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "ZAPOUT()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    addFarm(
      _lpTokenAddress: string,
      _farmAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addFarm(address,address)"(
      _lpTokenAddress: string,
      _farmAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    enterFarm(
      _farmId: BigNumberish,
      _lpTokenAddress: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "enterFarm(uint256,address)"(
      _farmId: BigNumberish,
      _lpTokenAddress: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    exitFarm(
      _farmId: BigNumberish,
      _lpTokenAddress: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "exitFarm(uint256,address)"(
      _farmId: BigNumberish,
      _lpTokenAddress: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    farmDirectory(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "farmDirectory(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getStakedBalance(
      _farmId: BigNumberish,
      _owner: string,
      _lpTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getStakedBalance(uint256,address,address)"(
      _farmId: BigNumberish,
      _owner: string,
      _lpTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    harvestPicklesConvertToEth(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "harvestPicklesConvertToEth()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    kill(overrides?: Overrides): Promise<ContractTransaction>;

    "kill()"(overrides?: Overrides): Promise<ContractTransaction>;

    owner(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "owner()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    pickle(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "pickle()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    pickleSellQty(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "pickleSellQty()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    rebalance(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "rebalance()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    tokenDirectory(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "tokenDirectory(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    uniAddress(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "uniAddress()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    updatePickleAddress(
      _newPickleAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updatePickleAddress(address)"(
      _newPickleAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updatePickleSellQty(
      _newQty: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updatePickleSellQty(uint256)"(
      _newQty: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateUSDCToken(
      _newAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateUSDCToken(address)"(
      _newAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateUniswap(
      _newAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateUniswap(address)"(
      _newAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updatefarmContract(
      _farmId: BigNumberish,
      _lpTokenAddress: string,
      _newFarmAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updatefarmContract(uint256,address,address)"(
      _farmId: BigNumberish,
      _lpTokenAddress: string,
      _newFarmAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    usdc(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "usdc()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    usdcAddress(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "usdcAddress()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    weth(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "weth()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    wethAddress(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "wethAddress()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    withdrawTokens(
      _token: string,
      _amount: BigNumberish,
      _destination: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawTokens(address,uint256,address)"(
      _token: string,
      _amount: BigNumberish,
      _destination: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    zapIn(
      _toWhomToIssue: string,
      _FromTokenContractAddress: string,
      _ToUnipoolToken0: string,
      _ToUnipoolToken1: string,
      _amount: BigNumberish,
      _minPoolTokens: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "zapIn(address,address,address,address,uint256,uint256)"(
      _toWhomToIssue: string,
      _FromTokenContractAddress: string,
      _ToUnipoolToken0: string,
      _ToUnipoolToken1: string,
      _amount: BigNumberish,
      _minPoolTokens: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    zapOutEthPair(
      _ToTokenContractAddress: string,
      _FromUniPoolAddress: string,
      _IncomingLP: BigNumberish,
      _minTokensRecs: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "zapOutEthPair(address,address,uint256,uint256)"(
      _ToTokenContractAddress: string,
      _FromUniPoolAddress: string,
      _IncomingLP: BigNumberish,
      _minTokensRecs: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    zapOutTokenPair(
      _FromUniPoolAddress: string,
      _IncomingLP: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "zapOutTokenPair(address,uint256)"(
      _FromUniPoolAddress: string,
      _IncomingLP: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;
  };

  ZAPIN(overrides?: CallOverrides): Promise<string>;

  "ZAPIN()"(overrides?: CallOverrides): Promise<string>;

  ZAPOUT(overrides?: CallOverrides): Promise<string>;

  "ZAPOUT()"(overrides?: CallOverrides): Promise<string>;

  addFarm(
    _lpTokenAddress: string,
    _farmAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addFarm(address,address)"(
    _lpTokenAddress: string,
    _farmAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  enterFarm(
    _farmId: BigNumberish,
    _lpTokenAddress: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "enterFarm(uint256,address)"(
    _farmId: BigNumberish,
    _lpTokenAddress: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  exitFarm(
    _farmId: BigNumberish,
    _lpTokenAddress: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "exitFarm(uint256,address)"(
    _farmId: BigNumberish,
    _lpTokenAddress: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  farmDirectory(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<string>;

  "farmDirectory(uint256,address)"(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getStakedBalance(
    _farmId: BigNumberish,
    _owner: string,
    _lpTokenAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getStakedBalance(uint256,address,address)"(
    _farmId: BigNumberish,
    _owner: string,
    _lpTokenAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  harvestPicklesConvertToEth(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "harvestPicklesConvertToEth()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  kill(overrides?: Overrides): Promise<ContractTransaction>;

  "kill()"(overrides?: Overrides): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  pickle(overrides?: CallOverrides): Promise<string>;

  "pickle()"(overrides?: CallOverrides): Promise<string>;

  pickleSellQty(overrides?: CallOverrides): Promise<BigNumber>;

  "pickleSellQty()"(overrides?: CallOverrides): Promise<BigNumber>;

  rebalance(overrides?: CallOverrides): Promise<string>;

  "rebalance()"(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  tokenDirectory(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "tokenDirectory(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  uniAddress(overrides?: CallOverrides): Promise<string>;

  "uniAddress()"(overrides?: CallOverrides): Promise<string>;

  updatePickleAddress(
    _newPickleAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updatePickleAddress(address)"(
    _newPickleAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updatePickleSellQty(
    _newQty: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updatePickleSellQty(uint256)"(
    _newQty: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateUSDCToken(
    _newAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateUSDCToken(address)"(
    _newAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateUniswap(
    _newAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateUniswap(address)"(
    _newAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updatefarmContract(
    _farmId: BigNumberish,
    _lpTokenAddress: string,
    _newFarmAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updatefarmContract(uint256,address,address)"(
    _farmId: BigNumberish,
    _lpTokenAddress: string,
    _newFarmAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  usdc(overrides?: CallOverrides): Promise<string>;

  "usdc()"(overrides?: CallOverrides): Promise<string>;

  usdcAddress(overrides?: CallOverrides): Promise<string>;

  "usdcAddress()"(overrides?: CallOverrides): Promise<string>;

  weth(overrides?: CallOverrides): Promise<string>;

  "weth()"(overrides?: CallOverrides): Promise<string>;

  wethAddress(overrides?: CallOverrides): Promise<string>;

  "wethAddress()"(overrides?: CallOverrides): Promise<string>;

  withdrawTokens(
    _token: string,
    _amount: BigNumberish,
    _destination: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawTokens(address,uint256,address)"(
    _token: string,
    _amount: BigNumberish,
    _destination: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  zapIn(
    _toWhomToIssue: string,
    _FromTokenContractAddress: string,
    _ToUnipoolToken0: string,
    _ToUnipoolToken1: string,
    _amount: BigNumberish,
    _minPoolTokens: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "zapIn(address,address,address,address,uint256,uint256)"(
    _toWhomToIssue: string,
    _FromTokenContractAddress: string,
    _ToUnipoolToken0: string,
    _ToUnipoolToken1: string,
    _amount: BigNumberish,
    _minPoolTokens: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  zapOutEthPair(
    _ToTokenContractAddress: string,
    _FromUniPoolAddress: string,
    _IncomingLP: BigNumberish,
    _minTokensRecs: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "zapOutEthPair(address,address,uint256,uint256)"(
    _ToTokenContractAddress: string,
    _FromUniPoolAddress: string,
    _IncomingLP: BigNumberish,
    _minTokensRecs: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  zapOutTokenPair(
    _FromUniPoolAddress: string,
    _IncomingLP: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "zapOutTokenPair(address,uint256)"(
    _FromUniPoolAddress: string,
    _IncomingLP: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  callStatic: {
    ZAPIN(overrides?: CallOverrides): Promise<string>;

    "ZAPIN()"(overrides?: CallOverrides): Promise<string>;

    ZAPOUT(overrides?: CallOverrides): Promise<string>;

    "ZAPOUT()"(overrides?: CallOverrides): Promise<string>;

    addFarm(
      _lpTokenAddress: string,
      _farmAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "addFarm(address,address)"(
      _lpTokenAddress: string,
      _farmAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    enterFarm(
      _farmId: BigNumberish,
      _lpTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "enterFarm(uint256,address)"(
      _farmId: BigNumberish,
      _lpTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    exitFarm(
      _farmId: BigNumberish,
      _lpTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "exitFarm(uint256,address)"(
      _farmId: BigNumberish,
      _lpTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    farmDirectory(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "farmDirectory(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getStakedBalance(
      _farmId: BigNumberish,
      _owner: string,
      _lpTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getStakedBalance(uint256,address,address)"(
      _farmId: BigNumberish,
      _owner: string,
      _lpTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    harvestPicklesConvertToEth(overrides?: CallOverrides): Promise<BigNumber>;

    "harvestPicklesConvertToEth()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    kill(overrides?: CallOverrides): Promise<void>;

    "kill()"(overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    pickle(overrides?: CallOverrides): Promise<string>;

    "pickle()"(overrides?: CallOverrides): Promise<string>;

    pickleSellQty(overrides?: CallOverrides): Promise<BigNumber>;

    "pickleSellQty()"(overrides?: CallOverrides): Promise<BigNumber>;

    rebalance(overrides?: CallOverrides): Promise<string>;

    "rebalance()"(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    tokenDirectory(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "tokenDirectory(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    uniAddress(overrides?: CallOverrides): Promise<string>;

    "uniAddress()"(overrides?: CallOverrides): Promise<string>;

    updatePickleAddress(
      _newPickleAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "updatePickleAddress(address)"(
      _newPickleAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    updatePickleSellQty(
      _newQty: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "updatePickleSellQty(uint256)"(
      _newQty: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    updateUSDCToken(
      _newAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "updateUSDCToken(address)"(
      _newAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    updateUniswap(
      _newAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "updateUniswap(address)"(
      _newAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    updatefarmContract(
      _farmId: BigNumberish,
      _lpTokenAddress: string,
      _newFarmAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "updatefarmContract(uint256,address,address)"(
      _farmId: BigNumberish,
      _lpTokenAddress: string,
      _newFarmAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    usdc(overrides?: CallOverrides): Promise<string>;

    "usdc()"(overrides?: CallOverrides): Promise<string>;

    usdcAddress(overrides?: CallOverrides): Promise<string>;

    "usdcAddress()"(overrides?: CallOverrides): Promise<string>;

    weth(overrides?: CallOverrides): Promise<string>;

    "weth()"(overrides?: CallOverrides): Promise<string>;

    wethAddress(overrides?: CallOverrides): Promise<string>;

    "wethAddress()"(overrides?: CallOverrides): Promise<string>;

    withdrawTokens(
      _token: string,
      _amount: BigNumberish,
      _destination: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "withdrawTokens(address,uint256,address)"(
      _token: string,
      _amount: BigNumberish,
      _destination: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    zapIn(
      _toWhomToIssue: string,
      _FromTokenContractAddress: string,
      _ToUnipoolToken0: string,
      _ToUnipoolToken1: string,
      _amount: BigNumberish,
      _minPoolTokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "zapIn(address,address,address,address,uint256,uint256)"(
      _toWhomToIssue: string,
      _FromTokenContractAddress: string,
      _ToUnipoolToken0: string,
      _ToUnipoolToken1: string,
      _amount: BigNumberish,
      _minPoolTokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    zapOutEthPair(
      _ToTokenContractAddress: string,
      _FromUniPoolAddress: string,
      _IncomingLP: BigNumberish,
      _minTokensRecs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "zapOutEthPair(address,address,uint256,uint256)"(
      _ToTokenContractAddress: string,
      _FromUniPoolAddress: string,
      _IncomingLP: BigNumberish,
      _minTokensRecs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    zapOutTokenPair(
      _FromUniPoolAddress: string,
      _IncomingLP: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      amountA: BigNumber;
      amountB: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "zapOutTokenPair(address,uint256)"(
      _FromUniPoolAddress: string,
      _IncomingLP: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      amountA: BigNumber;
      amountB: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimateGas: {
    ZAPIN(overrides?: CallOverrides): Promise<BigNumber>;

    "ZAPIN()"(overrides?: CallOverrides): Promise<BigNumber>;

    ZAPOUT(overrides?: CallOverrides): Promise<BigNumber>;

    "ZAPOUT()"(overrides?: CallOverrides): Promise<BigNumber>;

    addFarm(
      _lpTokenAddress: string,
      _farmAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addFarm(address,address)"(
      _lpTokenAddress: string,
      _farmAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    enterFarm(
      _farmId: BigNumberish,
      _lpTokenAddress: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "enterFarm(uint256,address)"(
      _farmId: BigNumberish,
      _lpTokenAddress: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    exitFarm(
      _farmId: BigNumberish,
      _lpTokenAddress: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "exitFarm(uint256,address)"(
      _farmId: BigNumberish,
      _lpTokenAddress: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    farmDirectory(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "farmDirectory(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakedBalance(
      _farmId: BigNumberish,
      _owner: string,
      _lpTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getStakedBalance(uint256,address,address)"(
      _farmId: BigNumberish,
      _owner: string,
      _lpTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    harvestPicklesConvertToEth(overrides?: Overrides): Promise<BigNumber>;

    "harvestPicklesConvertToEth()"(overrides?: Overrides): Promise<BigNumber>;

    kill(overrides?: Overrides): Promise<BigNumber>;

    "kill()"(overrides?: Overrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    pickle(overrides?: CallOverrides): Promise<BigNumber>;

    "pickle()"(overrides?: CallOverrides): Promise<BigNumber>;

    pickleSellQty(overrides?: CallOverrides): Promise<BigNumber>;

    "pickleSellQty()"(overrides?: CallOverrides): Promise<BigNumber>;

    rebalance(overrides?: CallOverrides): Promise<BigNumber>;

    "rebalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    tokenDirectory(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenDirectory(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    uniAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "uniAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    updatePickleAddress(
      _newPickleAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updatePickleAddress(address)"(
      _newPickleAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updatePickleSellQty(
      _newQty: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updatePickleSellQty(uint256)"(
      _newQty: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateUSDCToken(
      _newAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateUSDCToken(address)"(
      _newAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateUniswap(
      _newAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateUniswap(address)"(
      _newAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updatefarmContract(
      _farmId: BigNumberish,
      _lpTokenAddress: string,
      _newFarmAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updatefarmContract(uint256,address,address)"(
      _farmId: BigNumberish,
      _lpTokenAddress: string,
      _newFarmAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    usdc(overrides?: CallOverrides): Promise<BigNumber>;

    "usdc()"(overrides?: CallOverrides): Promise<BigNumber>;

    usdcAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "usdcAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<BigNumber>;

    "weth()"(overrides?: CallOverrides): Promise<BigNumber>;

    wethAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "wethAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawTokens(
      _token: string,
      _amount: BigNumberish,
      _destination: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdrawTokens(address,uint256,address)"(
      _token: string,
      _amount: BigNumberish,
      _destination: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    zapIn(
      _toWhomToIssue: string,
      _FromTokenContractAddress: string,
      _ToUnipoolToken0: string,
      _ToUnipoolToken1: string,
      _amount: BigNumberish,
      _minPoolTokens: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "zapIn(address,address,address,address,uint256,uint256)"(
      _toWhomToIssue: string,
      _FromTokenContractAddress: string,
      _ToUnipoolToken0: string,
      _ToUnipoolToken1: string,
      _amount: BigNumberish,
      _minPoolTokens: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    zapOutEthPair(
      _ToTokenContractAddress: string,
      _FromUniPoolAddress: string,
      _IncomingLP: BigNumberish,
      _minTokensRecs: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "zapOutEthPair(address,address,uint256,uint256)"(
      _ToTokenContractAddress: string,
      _FromUniPoolAddress: string,
      _IncomingLP: BigNumberish,
      _minTokensRecs: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    zapOutTokenPair(
      _FromUniPoolAddress: string,
      _IncomingLP: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "zapOutTokenPair(address,uint256)"(
      _FromUniPoolAddress: string,
      _IncomingLP: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ZAPIN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ZAPIN()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ZAPOUT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ZAPOUT()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addFarm(
      _lpTokenAddress: string,
      _farmAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addFarm(address,address)"(
      _lpTokenAddress: string,
      _farmAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    enterFarm(
      _farmId: BigNumberish,
      _lpTokenAddress: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "enterFarm(uint256,address)"(
      _farmId: BigNumberish,
      _lpTokenAddress: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    exitFarm(
      _farmId: BigNumberish,
      _lpTokenAddress: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "exitFarm(uint256,address)"(
      _farmId: BigNumberish,
      _lpTokenAddress: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    farmDirectory(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "farmDirectory(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakedBalance(
      _farmId: BigNumberish,
      _owner: string,
      _lpTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getStakedBalance(uint256,address,address)"(
      _farmId: BigNumberish,
      _owner: string,
      _lpTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    harvestPicklesConvertToEth(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "harvestPicklesConvertToEth()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    kill(overrides?: Overrides): Promise<PopulatedTransaction>;

    "kill()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pickle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "pickle()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pickleSellQty(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "pickleSellQty()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rebalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rebalance()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    tokenDirectory(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenDirectory(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    uniAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "uniAddress()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updatePickleAddress(
      _newPickleAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updatePickleAddress(address)"(
      _newPickleAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updatePickleSellQty(
      _newQty: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updatePickleSellQty(uint256)"(
      _newQty: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateUSDCToken(
      _newAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateUSDCToken(address)"(
      _newAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateUniswap(
      _newAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateUniswap(address)"(
      _newAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updatefarmContract(
      _farmId: BigNumberish,
      _lpTokenAddress: string,
      _newFarmAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updatefarmContract(uint256,address,address)"(
      _farmId: BigNumberish,
      _lpTokenAddress: string,
      _newFarmAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    usdc(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "usdc()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    usdcAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "usdcAddress()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "weth()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wethAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "wethAddress()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawTokens(
      _token: string,
      _amount: BigNumberish,
      _destination: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawTokens(address,uint256,address)"(
      _token: string,
      _amount: BigNumberish,
      _destination: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    zapIn(
      _toWhomToIssue: string,
      _FromTokenContractAddress: string,
      _ToUnipoolToken0: string,
      _ToUnipoolToken1: string,
      _amount: BigNumberish,
      _minPoolTokens: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "zapIn(address,address,address,address,uint256,uint256)"(
      _toWhomToIssue: string,
      _FromTokenContractAddress: string,
      _ToUnipoolToken0: string,
      _ToUnipoolToken1: string,
      _amount: BigNumberish,
      _minPoolTokens: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    zapOutEthPair(
      _ToTokenContractAddress: string,
      _FromUniPoolAddress: string,
      _IncomingLP: BigNumberish,
      _minTokensRecs: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "zapOutEthPair(address,address,uint256,uint256)"(
      _ToTokenContractAddress: string,
      _FromUniPoolAddress: string,
      _IncomingLP: BigNumberish,
      _minTokensRecs: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    zapOutTokenPair(
      _FromUniPoolAddress: string,
      _IncomingLP: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "zapOutTokenPair(address,uint256)"(
      _FromUniPoolAddress: string,
      _IncomingLP: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;
  };
}
