/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface FarmInterface extends ethers.utils.Interface {
  functions: {
    "AutoStake()": FunctionFragment;
    "FARM()": FunctionFragment;
    "OneSplit()": FunctionFragment;
    "PICKLE()": FunctionFragment;
    "PIPT()": FunctionFragment;
    "StakingRewards()": FunctionFragment;
    "USDC()": FunctionFragment;
    "UniFactory()": FunctionFragment;
    "UniswapRouter()": FunctionFragment;
    "VestedLPMining()": FunctionFragment;
    "YETI()": FunctionFragment;
    "autoStakeAddress()": FunctionFragment;
    "batchWithdrawToken(address[])": FunctionFragment;
    "enterFarm(string)": FunctionFragment;
    "exitFarm(string)": FunctionFragment;
    "farmTokenAddress()": FunctionFragment;
    "getStakedBalance(string)": FunctionFragment;
    "harvest(string)": FunctionFragment;
    "kill()": FunctionFragment;
    "onesplitAddress()": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "pickleAddress()": FunctionFragment;
    "piptAddress()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "stakingDirectory(string)": FunctionFragment;
    "stakingRewardsAddress()": FunctionFragment;
    "stopped()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "uniFactoryAddress()": FunctionFragment;
    "uniswapRouterAddress()": FunctionFragment;
    "unpause()": FunctionFragment;
    "updateFARMToken(address)": FunctionFragment;
    "updatePICKLEToken(address)": FunctionFragment;
    "updatePIPT(address)": FunctionFragment;
    "updateStakingAddress(string,address)": FunctionFragment;
    "updateStakingToken(string,address)": FunctionFragment;
    "updateUSDCToken(address)": FunctionFragment;
    "updateUniswapRouter(address)": FunctionFragment;
    "updateYETI(address)": FunctionFragment;
    "usdcAddress()": FunctionFragment;
    "wethAddress()": FunctionFragment;
    "withdrawAmountToAddress(address,uint256,address)": FunctionFragment;
    "withdrawToken(address)": FunctionFragment;
    "yetiAddress()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "AutoStake", values?: undefined): string;
  encodeFunctionData(functionFragment: "FARM", values?: undefined): string;
  encodeFunctionData(functionFragment: "OneSplit", values?: undefined): string;
  encodeFunctionData(functionFragment: "PICKLE", values?: undefined): string;
  encodeFunctionData(functionFragment: "PIPT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "StakingRewards",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "USDC", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "UniFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UniswapRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VestedLPMining",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "YETI", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "autoStakeAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "batchWithdrawToken",
    values: [string[]]
  ): string;
  encodeFunctionData(functionFragment: "enterFarm", values: [string]): string;
  encodeFunctionData(functionFragment: "exitFarm", values: [string]): string;
  encodeFunctionData(
    functionFragment: "farmTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStakedBalance",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "harvest", values: [string]): string;
  encodeFunctionData(functionFragment: "kill", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onesplitAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pickleAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "piptAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakingDirectory",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "stakingRewardsAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "stopped", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "uniFactoryAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapRouterAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateFARMToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePICKLEToken",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "updatePIPT", values: [string]): string;
  encodeFunctionData(
    functionFragment: "updateStakingAddress",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStakingToken",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateUSDCToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateUniswapRouter",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "updateYETI", values: [string]): string;
  encodeFunctionData(
    functionFragment: "usdcAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "wethAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAmountToAddress",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "yetiAddress",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "AutoStake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "FARM", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "OneSplit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "PICKLE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "PIPT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "StakingRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "USDC", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "UniFactory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "UniswapRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VestedLPMining",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "YETI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "autoStakeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchWithdrawToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "enterFarm", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exitFarm", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "farmTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakedBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "harvest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "kill", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onesplitAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pickleAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "piptAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingDirectory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingRewardsAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stopped", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniFactoryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapRouterAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateFARMToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePICKLEToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updatePIPT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateStakingAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStakingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateUSDCToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateUniswapRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateYETI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "usdcAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wethAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAmountToAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "yetiAddress",
    data: BytesLike
  ): Result;

  events: {
    "LogWithdraw(address,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export class Farm extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: FarmInterface;

  functions: {
    AutoStake(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "AutoStake()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    FARM(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "FARM()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    OneSplit(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "OneSplit()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    PICKLE(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "PICKLE()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    PIPT(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "PIPT()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    StakingRewards(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "StakingRewards()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    USDC(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "USDC()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    UniFactory(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "UniFactory()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    UniswapRouter(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "UniswapRouter()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    VestedLPMining(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "VestedLPMining()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    YETI(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "YETI()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    autoStakeAddress(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "autoStakeAddress()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    batchWithdrawToken(
      _tokenAddresses: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "batchWithdrawToken(address[])"(
      _tokenAddresses: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    enterFarm(
      _stakingTokenName: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "enterFarm(string)"(
      _stakingTokenName: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    exitFarm(
      _stakingTokenName: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "exitFarm(string)"(
      _stakingTokenName: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    farmTokenAddress(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "farmTokenAddress()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getStakedBalance(
      _stakingTokenName: string,
      overrides?: CallOverrides
    ): Promise<{
      balance: BigNumber;
      0: BigNumber;
    }>;

    "getStakedBalance(string)"(
      _stakingTokenName: string,
      overrides?: CallOverrides
    ): Promise<{
      balance: BigNumber;
      0: BigNumber;
    }>;

    harvest(
      _stakingTokenName: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "harvest(string)"(
      _stakingTokenName: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    kill(overrides?: Overrides): Promise<ContractTransaction>;

    "kill()"(overrides?: Overrides): Promise<ContractTransaction>;

    onesplitAddress(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "onesplitAddress()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    owner(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "owner()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    pause(overrides?: Overrides): Promise<ContractTransaction>;

    "pause()"(overrides?: Overrides): Promise<ContractTransaction>;

    paused(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "paused()"(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    pickleAddress(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "pickleAddress()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    piptAddress(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "piptAddress()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    stakingDirectory(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      tokenAddress: string;
      stakingAddress: string;
      0: string;
      1: string;
    }>;

    "stakingDirectory(string)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      tokenAddress: string;
      stakingAddress: string;
      0: string;
      1: string;
    }>;

    stakingRewardsAddress(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "stakingRewardsAddress()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    stopped(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "stopped()"(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    uniFactoryAddress(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "uniFactoryAddress()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    uniswapRouterAddress(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "uniswapRouterAddress()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    unpause(overrides?: Overrides): Promise<ContractTransaction>;

    "unpause()"(overrides?: Overrides): Promise<ContractTransaction>;

    updateFARMToken(
      _newAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateFARMToken(address)"(
      _newAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updatePICKLEToken(
      _newAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updatePICKLEToken(address)"(
      _newAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updatePIPT(
      _newAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updatePIPT(address)"(
      _newAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateStakingAddress(
      _stakingTokenName: string,
      _newStakingAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateStakingAddress(string,address)"(
      _stakingTokenName: string,
      _newStakingAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateStakingToken(
      _stakingTokenName: string,
      _newTokenAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateStakingToken(string,address)"(
      _stakingTokenName: string,
      _newTokenAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateUSDCToken(
      _newAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateUSDCToken(address)"(
      _newAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateUniswapRouter(
      _newAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateUniswapRouter(address)"(
      _newAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateYETI(
      _newAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateYETI(address)"(
      _newAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    usdcAddress(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "usdcAddress()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    wethAddress(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "wethAddress()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    withdrawAmountToAddress(
      _tokenAddress: string,
      _amount: BigNumberish,
      _destinationAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawAmountToAddress(address,uint256,address)"(
      _tokenAddress: string,
      _amount: BigNumberish,
      _destinationAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdrawToken(
      _tokenAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawToken(address)"(
      _tokenAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    yetiAddress(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "yetiAddress()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;
  };

  AutoStake(overrides?: CallOverrides): Promise<string>;

  "AutoStake()"(overrides?: CallOverrides): Promise<string>;

  FARM(overrides?: CallOverrides): Promise<string>;

  "FARM()"(overrides?: CallOverrides): Promise<string>;

  OneSplit(overrides?: CallOverrides): Promise<string>;

  "OneSplit()"(overrides?: CallOverrides): Promise<string>;

  PICKLE(overrides?: CallOverrides): Promise<string>;

  "PICKLE()"(overrides?: CallOverrides): Promise<string>;

  PIPT(overrides?: CallOverrides): Promise<string>;

  "PIPT()"(overrides?: CallOverrides): Promise<string>;

  StakingRewards(overrides?: CallOverrides): Promise<string>;

  "StakingRewards()"(overrides?: CallOverrides): Promise<string>;

  USDC(overrides?: CallOverrides): Promise<string>;

  "USDC()"(overrides?: CallOverrides): Promise<string>;

  UniFactory(overrides?: CallOverrides): Promise<string>;

  "UniFactory()"(overrides?: CallOverrides): Promise<string>;

  UniswapRouter(overrides?: CallOverrides): Promise<string>;

  "UniswapRouter()"(overrides?: CallOverrides): Promise<string>;

  VestedLPMining(overrides?: CallOverrides): Promise<string>;

  "VestedLPMining()"(overrides?: CallOverrides): Promise<string>;

  YETI(overrides?: CallOverrides): Promise<string>;

  "YETI()"(overrides?: CallOverrides): Promise<string>;

  autoStakeAddress(overrides?: CallOverrides): Promise<string>;

  "autoStakeAddress()"(overrides?: CallOverrides): Promise<string>;

  batchWithdrawToken(
    _tokenAddresses: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "batchWithdrawToken(address[])"(
    _tokenAddresses: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  enterFarm(
    _stakingTokenName: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "enterFarm(string)"(
    _stakingTokenName: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  exitFarm(
    _stakingTokenName: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "exitFarm(string)"(
    _stakingTokenName: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  farmTokenAddress(overrides?: CallOverrides): Promise<string>;

  "farmTokenAddress()"(overrides?: CallOverrides): Promise<string>;

  getStakedBalance(
    _stakingTokenName: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getStakedBalance(string)"(
    _stakingTokenName: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  harvest(
    _stakingTokenName: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "harvest(string)"(
    _stakingTokenName: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  kill(overrides?: Overrides): Promise<ContractTransaction>;

  "kill()"(overrides?: Overrides): Promise<ContractTransaction>;

  onesplitAddress(overrides?: CallOverrides): Promise<string>;

  "onesplitAddress()"(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  pause(overrides?: Overrides): Promise<ContractTransaction>;

  "pause()"(overrides?: Overrides): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  "paused()"(overrides?: CallOverrides): Promise<boolean>;

  pickleAddress(overrides?: CallOverrides): Promise<string>;

  "pickleAddress()"(overrides?: CallOverrides): Promise<string>;

  piptAddress(overrides?: CallOverrides): Promise<string>;

  "piptAddress()"(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  stakingDirectory(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<{
    tokenAddress: string;
    stakingAddress: string;
    0: string;
    1: string;
  }>;

  "stakingDirectory(string)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<{
    tokenAddress: string;
    stakingAddress: string;
    0: string;
    1: string;
  }>;

  stakingRewardsAddress(overrides?: CallOverrides): Promise<string>;

  "stakingRewardsAddress()"(overrides?: CallOverrides): Promise<string>;

  stopped(overrides?: CallOverrides): Promise<boolean>;

  "stopped()"(overrides?: CallOverrides): Promise<boolean>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  uniFactoryAddress(overrides?: CallOverrides): Promise<string>;

  "uniFactoryAddress()"(overrides?: CallOverrides): Promise<string>;

  uniswapRouterAddress(overrides?: CallOverrides): Promise<string>;

  "uniswapRouterAddress()"(overrides?: CallOverrides): Promise<string>;

  unpause(overrides?: Overrides): Promise<ContractTransaction>;

  "unpause()"(overrides?: Overrides): Promise<ContractTransaction>;

  updateFARMToken(
    _newAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateFARMToken(address)"(
    _newAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updatePICKLEToken(
    _newAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updatePICKLEToken(address)"(
    _newAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updatePIPT(
    _newAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updatePIPT(address)"(
    _newAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateStakingAddress(
    _stakingTokenName: string,
    _newStakingAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateStakingAddress(string,address)"(
    _stakingTokenName: string,
    _newStakingAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateStakingToken(
    _stakingTokenName: string,
    _newTokenAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateStakingToken(string,address)"(
    _stakingTokenName: string,
    _newTokenAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateUSDCToken(
    _newAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateUSDCToken(address)"(
    _newAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateUniswapRouter(
    _newAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateUniswapRouter(address)"(
    _newAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateYETI(
    _newAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateYETI(address)"(
    _newAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  usdcAddress(overrides?: CallOverrides): Promise<string>;

  "usdcAddress()"(overrides?: CallOverrides): Promise<string>;

  wethAddress(overrides?: CallOverrides): Promise<string>;

  "wethAddress()"(overrides?: CallOverrides): Promise<string>;

  withdrawAmountToAddress(
    _tokenAddress: string,
    _amount: BigNumberish,
    _destinationAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawAmountToAddress(address,uint256,address)"(
    _tokenAddress: string,
    _amount: BigNumberish,
    _destinationAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdrawToken(
    _tokenAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawToken(address)"(
    _tokenAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  yetiAddress(overrides?: CallOverrides): Promise<string>;

  "yetiAddress()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    AutoStake(overrides?: CallOverrides): Promise<string>;

    "AutoStake()"(overrides?: CallOverrides): Promise<string>;

    FARM(overrides?: CallOverrides): Promise<string>;

    "FARM()"(overrides?: CallOverrides): Promise<string>;

    OneSplit(overrides?: CallOverrides): Promise<string>;

    "OneSplit()"(overrides?: CallOverrides): Promise<string>;

    PICKLE(overrides?: CallOverrides): Promise<string>;

    "PICKLE()"(overrides?: CallOverrides): Promise<string>;

    PIPT(overrides?: CallOverrides): Promise<string>;

    "PIPT()"(overrides?: CallOverrides): Promise<string>;

    StakingRewards(overrides?: CallOverrides): Promise<string>;

    "StakingRewards()"(overrides?: CallOverrides): Promise<string>;

    USDC(overrides?: CallOverrides): Promise<string>;

    "USDC()"(overrides?: CallOverrides): Promise<string>;

    UniFactory(overrides?: CallOverrides): Promise<string>;

    "UniFactory()"(overrides?: CallOverrides): Promise<string>;

    UniswapRouter(overrides?: CallOverrides): Promise<string>;

    "UniswapRouter()"(overrides?: CallOverrides): Promise<string>;

    VestedLPMining(overrides?: CallOverrides): Promise<string>;

    "VestedLPMining()"(overrides?: CallOverrides): Promise<string>;

    YETI(overrides?: CallOverrides): Promise<string>;

    "YETI()"(overrides?: CallOverrides): Promise<string>;

    autoStakeAddress(overrides?: CallOverrides): Promise<string>;

    "autoStakeAddress()"(overrides?: CallOverrides): Promise<string>;

    batchWithdrawToken(
      _tokenAddresses: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    "batchWithdrawToken(address[])"(
      _tokenAddresses: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    enterFarm(
      _stakingTokenName: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "enterFarm(string)"(
      _stakingTokenName: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exitFarm(
      _stakingTokenName: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "exitFarm(string)"(
      _stakingTokenName: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    farmTokenAddress(overrides?: CallOverrides): Promise<string>;

    "farmTokenAddress()"(overrides?: CallOverrides): Promise<string>;

    getStakedBalance(
      _stakingTokenName: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getStakedBalance(string)"(
      _stakingTokenName: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    harvest(
      _stakingTokenName: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "harvest(string)"(
      _stakingTokenName: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    kill(overrides?: CallOverrides): Promise<void>;

    "kill()"(overrides?: CallOverrides): Promise<void>;

    onesplitAddress(overrides?: CallOverrides): Promise<string>;

    "onesplitAddress()"(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<boolean>;

    "pause()"(overrides?: CallOverrides): Promise<boolean>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    "paused()"(overrides?: CallOverrides): Promise<boolean>;

    pickleAddress(overrides?: CallOverrides): Promise<string>;

    "pickleAddress()"(overrides?: CallOverrides): Promise<string>;

    piptAddress(overrides?: CallOverrides): Promise<string>;

    "piptAddress()"(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    stakingDirectory(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      tokenAddress: string;
      stakingAddress: string;
      0: string;
      1: string;
    }>;

    "stakingDirectory(string)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      tokenAddress: string;
      stakingAddress: string;
      0: string;
      1: string;
    }>;

    stakingRewardsAddress(overrides?: CallOverrides): Promise<string>;

    "stakingRewardsAddress()"(overrides?: CallOverrides): Promise<string>;

    stopped(overrides?: CallOverrides): Promise<boolean>;

    "stopped()"(overrides?: CallOverrides): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    uniFactoryAddress(overrides?: CallOverrides): Promise<string>;

    "uniFactoryAddress()"(overrides?: CallOverrides): Promise<string>;

    uniswapRouterAddress(overrides?: CallOverrides): Promise<string>;

    "uniswapRouterAddress()"(overrides?: CallOverrides): Promise<string>;

    unpause(overrides?: CallOverrides): Promise<boolean>;

    "unpause()"(overrides?: CallOverrides): Promise<boolean>;

    updateFARMToken(
      _newAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "updateFARMToken(address)"(
      _newAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    updatePICKLEToken(
      _newAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "updatePICKLEToken(address)"(
      _newAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    updatePIPT(
      _newAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "updatePIPT(address)"(
      _newAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    updateStakingAddress(
      _stakingTokenName: string,
      _newStakingAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateStakingAddress(string,address)"(
      _stakingTokenName: string,
      _newStakingAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateStakingToken(
      _stakingTokenName: string,
      _newTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateStakingToken(string,address)"(
      _stakingTokenName: string,
      _newTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateUSDCToken(
      _newAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "updateUSDCToken(address)"(
      _newAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    updateUniswapRouter(
      _newAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "updateUniswapRouter(address)"(
      _newAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    updateYETI(
      _newAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "updateYETI(address)"(
      _newAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    usdcAddress(overrides?: CallOverrides): Promise<string>;

    "usdcAddress()"(overrides?: CallOverrides): Promise<string>;

    wethAddress(overrides?: CallOverrides): Promise<string>;

    "wethAddress()"(overrides?: CallOverrides): Promise<string>;

    withdrawAmountToAddress(
      _tokenAddress: string,
      _amount: BigNumberish,
      _destinationAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawAmountToAddress(address,uint256,address)"(
      _tokenAddress: string,
      _amount: BigNumberish,
      _destinationAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawToken(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawToken(address)"(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    yetiAddress(overrides?: CallOverrides): Promise<string>;

    "yetiAddress()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    LogWithdraw(
      _from: string | null,
      _tokenAddress: string | null,
      amount: null
    ): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    Paused(account: null): EventFilter;

    Unpaused(account: null): EventFilter;
  };

  estimateGas: {
    AutoStake(overrides?: CallOverrides): Promise<BigNumber>;

    "AutoStake()"(overrides?: CallOverrides): Promise<BigNumber>;

    FARM(overrides?: CallOverrides): Promise<BigNumber>;

    "FARM()"(overrides?: CallOverrides): Promise<BigNumber>;

    OneSplit(overrides?: CallOverrides): Promise<BigNumber>;

    "OneSplit()"(overrides?: CallOverrides): Promise<BigNumber>;

    PICKLE(overrides?: CallOverrides): Promise<BigNumber>;

    "PICKLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    PIPT(overrides?: CallOverrides): Promise<BigNumber>;

    "PIPT()"(overrides?: CallOverrides): Promise<BigNumber>;

    StakingRewards(overrides?: CallOverrides): Promise<BigNumber>;

    "StakingRewards()"(overrides?: CallOverrides): Promise<BigNumber>;

    USDC(overrides?: CallOverrides): Promise<BigNumber>;

    "USDC()"(overrides?: CallOverrides): Promise<BigNumber>;

    UniFactory(overrides?: CallOverrides): Promise<BigNumber>;

    "UniFactory()"(overrides?: CallOverrides): Promise<BigNumber>;

    UniswapRouter(overrides?: CallOverrides): Promise<BigNumber>;

    "UniswapRouter()"(overrides?: CallOverrides): Promise<BigNumber>;

    VestedLPMining(overrides?: CallOverrides): Promise<BigNumber>;

    "VestedLPMining()"(overrides?: CallOverrides): Promise<BigNumber>;

    YETI(overrides?: CallOverrides): Promise<BigNumber>;

    "YETI()"(overrides?: CallOverrides): Promise<BigNumber>;

    autoStakeAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "autoStakeAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    batchWithdrawToken(
      _tokenAddresses: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "batchWithdrawToken(address[])"(
      _tokenAddresses: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    enterFarm(
      _stakingTokenName: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "enterFarm(string)"(
      _stakingTokenName: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    exitFarm(
      _stakingTokenName: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "exitFarm(string)"(
      _stakingTokenName: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    farmTokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "farmTokenAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    getStakedBalance(
      _stakingTokenName: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getStakedBalance(string)"(
      _stakingTokenName: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    harvest(
      _stakingTokenName: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "harvest(string)"(
      _stakingTokenName: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    kill(overrides?: Overrides): Promise<BigNumber>;

    "kill()"(overrides?: Overrides): Promise<BigNumber>;

    onesplitAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "onesplitAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: Overrides): Promise<BigNumber>;

    "pause()"(overrides?: Overrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    "paused()"(overrides?: CallOverrides): Promise<BigNumber>;

    pickleAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "pickleAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    piptAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "piptAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    stakingDirectory(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "stakingDirectory(string)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakingRewardsAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "stakingRewardsAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    stopped(overrides?: CallOverrides): Promise<BigNumber>;

    "stopped()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    uniFactoryAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "uniFactoryAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    uniswapRouterAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "uniswapRouterAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(overrides?: Overrides): Promise<BigNumber>;

    "unpause()"(overrides?: Overrides): Promise<BigNumber>;

    updateFARMToken(
      _newAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateFARMToken(address)"(
      _newAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updatePICKLEToken(
      _newAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updatePICKLEToken(address)"(
      _newAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updatePIPT(_newAddress: string, overrides?: Overrides): Promise<BigNumber>;

    "updatePIPT(address)"(
      _newAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateStakingAddress(
      _stakingTokenName: string,
      _newStakingAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateStakingAddress(string,address)"(
      _stakingTokenName: string,
      _newStakingAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateStakingToken(
      _stakingTokenName: string,
      _newTokenAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateStakingToken(string,address)"(
      _stakingTokenName: string,
      _newTokenAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateUSDCToken(
      _newAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateUSDCToken(address)"(
      _newAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateUniswapRouter(
      _newAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateUniswapRouter(address)"(
      _newAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateYETI(_newAddress: string, overrides?: Overrides): Promise<BigNumber>;

    "updateYETI(address)"(
      _newAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    usdcAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "usdcAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    wethAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "wethAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawAmountToAddress(
      _tokenAddress: string,
      _amount: BigNumberish,
      _destinationAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdrawAmountToAddress(address,uint256,address)"(
      _tokenAddress: string,
      _amount: BigNumberish,
      _destinationAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdrawToken(
      _tokenAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdrawToken(address)"(
      _tokenAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    yetiAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "yetiAddress()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    AutoStake(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "AutoStake()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    FARM(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "FARM()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    OneSplit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "OneSplit()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PICKLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "PICKLE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PIPT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "PIPT()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    StakingRewards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "StakingRewards()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    USDC(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "USDC()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    UniFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "UniFactory()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    UniswapRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "UniswapRouter()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    VestedLPMining(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "VestedLPMining()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    YETI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "YETI()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    autoStakeAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "autoStakeAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    batchWithdrawToken(
      _tokenAddresses: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "batchWithdrawToken(address[])"(
      _tokenAddresses: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    enterFarm(
      _stakingTokenName: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "enterFarm(string)"(
      _stakingTokenName: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    exitFarm(
      _stakingTokenName: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "exitFarm(string)"(
      _stakingTokenName: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    farmTokenAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "farmTokenAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakedBalance(
      _stakingTokenName: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getStakedBalance(string)"(
      _stakingTokenName: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    harvest(
      _stakingTokenName: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "harvest(string)"(
      _stakingTokenName: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    kill(overrides?: Overrides): Promise<PopulatedTransaction>;

    "kill()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    onesplitAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "onesplitAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(overrides?: Overrides): Promise<PopulatedTransaction>;

    "pause()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "paused()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pickleAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "pickleAddress()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    piptAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "piptAddress()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    stakingDirectory(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "stakingDirectory(string)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakingRewardsAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "stakingRewardsAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stopped(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "stopped()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    uniFactoryAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "uniFactoryAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    uniswapRouterAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "uniswapRouterAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unpause(overrides?: Overrides): Promise<PopulatedTransaction>;

    "unpause()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    updateFARMToken(
      _newAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateFARMToken(address)"(
      _newAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updatePICKLEToken(
      _newAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updatePICKLEToken(address)"(
      _newAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updatePIPT(
      _newAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updatePIPT(address)"(
      _newAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateStakingAddress(
      _stakingTokenName: string,
      _newStakingAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateStakingAddress(string,address)"(
      _stakingTokenName: string,
      _newStakingAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateStakingToken(
      _stakingTokenName: string,
      _newTokenAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateStakingToken(string,address)"(
      _stakingTokenName: string,
      _newTokenAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateUSDCToken(
      _newAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateUSDCToken(address)"(
      _newAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateUniswapRouter(
      _newAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateUniswapRouter(address)"(
      _newAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateYETI(
      _newAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateYETI(address)"(
      _newAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    usdcAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "usdcAddress()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wethAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "wethAddress()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawAmountToAddress(
      _tokenAddress: string,
      _amount: BigNumberish,
      _destinationAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawAmountToAddress(address,uint256,address)"(
      _tokenAddress: string,
      _amount: BigNumberish,
      _destinationAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdrawToken(
      _tokenAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawToken(address)"(
      _tokenAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    yetiAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "yetiAddress()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
